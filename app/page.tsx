'use client';

import { useState } from 'react';

export default function ChatBox() {
  const [question, setQuestion] = useState('');
  const [answer, setAnswer] = useState('');
  const [loading, setLoading] = useState(false);

  const ask = async () => {
    if (!question.trim()) return;

    setLoading(true);
    setAnswer(''); // –æ—á–∏—Å—Ç–∫–∞

    const url = process.env.NEXT_PUBLIC_API_URL + '/ask';
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', url, '—Å –≤–æ–ø—Ä–æ—Å–æ–º:', question);

    try {
      const res = await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ question }),
      });

      if (!res.ok) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞:', res.status, await res.text());
        setAnswer('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      } else {
        const data = await res.json();
        console.log('üì• –û—Ç–≤–µ—Ç:', data);
        setAnswer(data.answer || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞');
      }
    } catch (err) {
      console.error('‚ùó –û—à–∏–±–∫–∞ fetch:', err);
      setAnswer('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
    }

    setLoading(false);
  };

  return (
    <div style={{ maxWidth: 600, margin: '0 auto', padding: 20 }}>
      <textarea
        placeholder="–í–≤–µ–¥–∏—Ç–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å..."
        value={question}
        onChange={(e) => setQuestion(e.target.value)}
        rows={4}
        style={{ width: '100%', padding: 10 }}
      />
      <button onClick={ask} disabled={loading} style={{ marginTop: 10 }}>
        {loading ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–°–ø—Ä–æ—Å–∏—Ç—å OrionBot'}
      </button>
      {answer && (
        <div style={{ marginTop: 20, whiteSpace: 'pre-wrap', color: '#fff' }}>
          <strong>–û—Ç–≤–µ—Ç:</strong>
          <p>{answer}</p>
        </div>
      )}
    </div>
  );
}
